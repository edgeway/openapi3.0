openapi: 3.0.1
info:
  title: User administration and authentication Internal API
  description: |
    An API for user administration and user authentication handling.
    Not exposed via the API Gateway - intended for internal use only.
  contact:
    name: Edgeway
    url: smardtv.com
    email: devops.vep@smardtv.com
  version: 1.0.0
servers:
- url: https://smarthing-cloud-dev.com
  description: Dev Server
- url: https://smarthing-cloud.com
  description: Prod Server

paths:
  /api/internal/v1/action/auth/verify:
    post:
      security:
      - bearerAuth: []
      summary: Check the validity of a token
      description: |
        Besides the basic validity check, checks the token expiration time and user-initiated token revocation.

        Services which intend to use it should be correctly set up in the gateway's configuration.
      parameters:
      - name: X-Original-URI
        in: header
        description: |
          URI the original request was sent to, the URI is expected to have
          at least 4 components, eg. /api/management/1.0/foo/bar
        required: true
        schema:
          type: string
          format: HTTP path
      - name: X-Original-Method
        in: header
        description: HTTP method used when accessing the original URI
        required: true
        schema:
          type: string
          enum:
          - GET
          - PUT
          - POST
          - DELETE
      responses:
        200:
          description: The token is valid.
          content: {}
        400:
          description: Missing or malformed request parameters.
          content: {}
        401:
          description: Verification failed, authentication should not be granted.
          content: {}
        403:
          description: Token has expired - apply for a new one.
          content: {}
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/internal/v1/action/tenants:
    post:
      summary: Create tenant
      description: |
        Create a tenant with provided configuration.
      security:
      - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantNew'
        required: true
      responses:
        201:
          description: The tenant was created successfully.
          content: {}
        400:
          description: Missing or malformed request parameters.
          content: {}
        500:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: tenant
  /api/internal/v1/action/tenants/{tenant_id}/users:
    post:
      summary: Create user
      security:
      - bearerAuth: []
      parameters:
      - name: tenant_id
        in: path
        description: Tenant ID.
        required: true
        schema:
          type: string
      requestBody:
        description: New user data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNew'
        required: true
      responses:
        201:
          description: The user was successfully created.
          content: {}
        400:
          description: |
            The request body is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: |
            Tenant with given ID does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        422:
          description: |
            User name or ID is duplicated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: user
  /api/internal/v1/action/tokens:
    delete:
      summary: Delete all user tokens
      description: |
        This endpoint is designed to be used for tenant account suspension purpose.
        When only tenant_id parameter is set, tokens for all tenant users will be removed.
        It is also possible to remove tokens for user with given user_id by setting
        optional user_id parameter.
      security:
      - bearerAuth: []
      parameters:
      - name: tenant_id
        in: query
        description: Tenant ID.
        required: true
        schema:
          type: string
      - name: user_id
        in: query
        description: User ID.
        schema:
          type: string
      responses:
        204:
          description: Tokens deleted.
          content: {}
        400:
          description: |
            Invalid parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Description of the error.
      description: Error descriptor.
      example:
        application/json:
          error: missing Authorization header
    TenantNew:
      type: object
      properties:
        tenant_id:
          type: string
          description: ID of given tenant.
      description: Tenant configuration.
      example:
        application/json:
          tenant_id: "1234"
    UserNew:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          description: User's email.
          format: email
        password:
          type: string
          description: User's password.
        propagate:
          type: boolean
          description: |
            When propagate is true, the action will propagate user information
            to tenantadm, otherwise no request to tenantadm will be made.
            Defaults to true.
      description: New user descriptor.
      example:
        application/json:
          email: user@acme.com
          password: secret
          propagate: false
